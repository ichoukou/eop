2013-08-12 09:00:54  DEBUG [timerFactory] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:00:54  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-1] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:00:54  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-2] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:00:54  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-3] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:00:55  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-1] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index_pressure c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:00:55  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-3] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_version c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:00:55  DEBUG [timerFactory] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USER WHERE user_type = ? 
2013-08-12 09:00:55  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-2] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, o.order_type as orderType, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:00:55  DEBUG [timerFactory] (Slf4jImpl.java:28) - ==> Parameters: 1(String)
2013-08-12 09:00:55  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-1] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:00:55  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-3] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:00:55  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-2] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:00:55  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-3] (Slf4jImpl.java:28) - ==>  Executing: select t.id, t.region_number, t.region_name, t.parent_id, t.remark, t.create_time, t.update_time from EC_CORE_REGION t 
2013-08-12 09:00:55  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-3] (Slf4jImpl.java:28) - ==> Parameters: 
2013-08-12 09:00:55  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-1] (Slf4jImpl.java:28) - ==>  Executing: select t.id, t.region_number, t.region_name, t.parent_id, t.remark, t.create_time, t.update_time from EC_CORE_REGION t 
2013-08-12 09:00:55  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-1] (Slf4jImpl.java:28) - ==> Parameters: 
2013-08-12 09:00:55  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-2] (Slf4jImpl.java:28) - ==>  Executing: select t.id, t.region_number, t.region_name, t.parent_id, t.remark, t.create_time, t.update_time from EC_CORE_REGION t 
2013-08-12 09:00:55  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-2] (Slf4jImpl.java:28) - ==> Parameters: 
2013-08-12 09:00:55  DEBUG [timerFactory] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:00:55  DEBUG [timerFactory] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USER WHERE user_type = ? 
2013-08-12 09:00:55  DEBUG [timerFactory] (Slf4jImpl.java:28) - ==> Parameters: 2(String)
2013-08-12 09:00:57  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-6] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:00:57  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-5] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:00:57  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-5] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index_pressure c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:00:57  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-6] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, o.order_type as orderType, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:00:57  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-5] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:00:57  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-6] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:00:57  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-7] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:00:57  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-7] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_version c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:00:57  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-7] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:00  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-9] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:00  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-10] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:00  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-9] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index_pressure c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:00  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-10] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, o.order_type as orderType, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:00  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-9] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:00  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-10] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:00  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-4] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:00  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-4] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_version c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:00  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-4] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:00  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-1] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:00  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-1] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, o.order_type as orderType, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_build_search b,ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 order by b.id asc limit ? 
2013-08-12 09:01:00  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-1] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer)
2013-08-12 09:01:03  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-3] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:03  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-5] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:03  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:03  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-5] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_version c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:03  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-8] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, o.order_type as orderType, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:03  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-5] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:03  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-8] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:03  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-3] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index_pressure c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:03  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-3] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:06  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-6] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:06  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-2] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:06  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-2] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, o.order_type as orderType, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:06  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-6] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index_pressure c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:06  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-2] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:06  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-6] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:06  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-9] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:06  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-9] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_version c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:06  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-9] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:09  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-1] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:09  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-10] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:09  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-1] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, o.order_type as orderType, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:09  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-10] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index_pressure c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:09  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-1] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:09  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-10] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:09  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-7] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:09  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-7] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_version c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:09  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-7] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:10  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:10  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-8] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, o.order_type as orderType, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_build_search b,ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 order by b.id asc limit ? 
2013-08-12 09:01:10  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-8] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer)
2013-08-12 09:01:12  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-4] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:12  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-5] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:12  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-4] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, o.order_type as orderType, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:12  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-5] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index_pressure c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:12  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-4] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:12  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-6] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:12  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-5] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:12  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-6] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_version c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:12  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-6] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:15  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-3] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:15  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-2] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:15  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-3] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, o.order_type as orderType, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:15  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-3] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:15  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-2] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index_pressure c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:15  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-2] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:15  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-7] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:15  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-7] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_version c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:15  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-7] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:18  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-10] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:18  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-10] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index_pressure c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:18  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-10] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:18  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:18  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-8] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, o.order_type as orderType, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:18  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-8] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:18  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-9] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:18  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-9] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_version c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:18  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-9] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:20  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-5] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:20  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-5] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, o.order_type as orderType, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_build_search b,ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 order by b.id asc limit ? 
2013-08-12 09:01:20  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-5] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer)
2013-08-12 09:01:21  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-1] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:21  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-1] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, o.order_type as orderType, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:21  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-1] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:21  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-6] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:21  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-3] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:21  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-6] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index_pressure c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:21  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-6] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:21  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-3] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_version c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:21  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-3] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:24  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-4] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:24  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-5] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:24  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-4] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, o.order_type as orderType, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:24  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-5] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_version c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:24  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-4] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:24  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-2] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:01:24  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-5] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:01:24  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-2] (Slf4jImpl.java:28) - ==>  Executing: select o.id as id,o.mailNo as mailNo,o.status as status,t.prov as prov,s.prov as provF, o.create_time as createTime,o.accept_time as acceptTime,o.customer_id as customerId, t.name as name,t.phone as phone,t.mobile as mobile,t.numProv as numProv, t.city as city,t.district as district,o.weight as weight,s.numProv as numProvF, s.city as cityF,o.tx_logistic_id as txLogisticId, t.address as address,o.trim_freight as trimFreight,o.freight_type as freightType, o.line_type as lineType,b.build_task as buildTask,b.mail_no as oldMailNo,o.partitiondate as partitiondate, o.type as holdTime from ec_core_order o, ec_core_traderinfo t ,ec_core_traderinfo s, (select id ,order_id,build_task,mail_no from ec_core_build_search_status_weight_index_pressure c order by c.id asc limit ?) as b where b.order_id=o.id and o.id=t.order_id and o.id=s.order_id and t.trade_type=1 and s.trade_type=0 and o.partitiondate >=? and o.partitiondate <= ? and t.partitiondate >=? and t.partitiondate <= ? and s.partitiondate >=? and s.partitiondate <= ?; 
2013-08-12 09:01:24  DEBUG [org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-2] (Slf4jImpl.java:28) - ==> Parameters: 50000(Integer), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String), 2013-07-13(String), 2013-08-12(String)
2013-08-12 09:02:24  DEBUG [timerFactory] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:02:24  DEBUG [timerFactory] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USER WHERE user_type = ? 
2013-08-12 09:02:24  DEBUG [timerFactory] (Slf4jImpl.java:28) - ==> Parameters: 1(String)
2013-08-12 09:02:25  DEBUG [timerFactory] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:02:25  DEBUG [timerFactory] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USER WHERE user_type = ? 
2013-08-12 09:02:25  DEBUG [timerFactory] (Slf4jImpl.java:28) - ==> Parameters: 2(String)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USER WHERE user_name = BINARY(?) AND user_password = ? 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 4QrcOUm6Wau+VuBX8g+IPg==(String)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USER_CUSTOM WHERE user_name=? AND relational_query=? AND type=? 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 1(String), 1(String)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USER WHERE id = ? 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: insert into EC_CORE_STATS_MESSAGE(id,stats_type, stats_reason, remark,login_time,logout_time,user_id) values(?, ?, ?, ?, ?, ?, ?) 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 0(String), net.ytoec.kernel.dataobject.User@c(String), 100009:登录系统,ip:127.0.0.1,ip:127.0.0.1,ip:127.0.0.1(String), 2013-08-12 09:03:07.206(Timestamp), null, 12(Integer)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: UPDATE EC_CORE_USER SET parentId=?, user_name=?, user_password=?, tele_phone=?, mobile_phone=?, address_province=?, address_city=?, address_district=?, address_street=?, sex=?, shop_name=?, shop_account=?, mail=?, card_type=?, card_no=?, user_type=?, user_source=?, user_state=?, user_level=?, create_user=?, update_time=now(), remark=?, site=?, user_name_text=?, user_code = ?, login_time = ?, taobao_encode_key = ?, field001 = ?, field002 = ?, field003 = ?, binded_customer_id = ?, client_id = ? ,child_type = ? WHERE id = ? 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: null, 100009(String), 4QrcOUm6Wau+VuBX8g+IPg==(String), 010-64262238(String), 18001387001(String), 北京(String), 北京市(String), 朝阳区(String), 黄寺大街12号华沛写字楼A座一层(String),  M(String), null, null, caozhi_soft@163.com(String),  1(String), 771037(String), 2(String), null, 1(String), null, null, null, 100009(String), 和记黄埔（中国）商贸有限公司(String), 100009(String), 2013-08-12 09:03:07.206(Timestamp), 12(String), 110000(String), ,MDAwMDk=,TXZBYw==,eXRvMQ==(String), true(String), null, null, null, 12(Integer)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE conf_type = ? AND conf_key = ? 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 2(String), permission_admin(String)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE pid = ? order by seq asc 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 93(Integer)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE conf_type = ? AND conf_key = ? 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 2(String), permission_wangdian(String)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE pid = ? order by seq asc 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 94(Integer)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE conf_type = ? AND conf_key = ? 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 2(String), permission_wangdian_kefu(String)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE pid = ? order by seq asc 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 95(Integer)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE conf_type = ? AND conf_key = ? 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 2(String), permission_wangdian_caiwu(String)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE pid = ? order by seq asc 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 96(Integer)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE conf_type = ? AND conf_key = ? 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 2(String), permission_maijia(String)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE pid = ? order by seq asc 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 97(Integer)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE conf_type = ? AND conf_key = ? 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 2(String), permission_maijia_kefu(String)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE pid = ? order by seq asc 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 98(Integer)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE conf_type = ? AND conf_key = ? 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 2(String), permission_maijia_caiwu(String)
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE pid = ? order by seq asc 
2013-08-12 09:03:07  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 99(Integer)
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE conf_type = ? AND conf_key = ? 
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 2(String), permission_pingtai(String)
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_CONFIGCODE WHERE pid = ? order by seq asc 
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 100(Integer)
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USER U WHERE U.PARENTID = ? order by u.login_time desc 
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer)
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USERTHREAD WHERE user_state= ? and site_code = ? order by cteate_time desc 
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 1(String), 100009(String)
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: select * from eop_cms_column where column_code = ? 
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: yitong_01(String)
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==>  Executing: select * from eop_cms_article WHERE column_id = ? and reader_type in(?,'0') ORDER BY seq asc,create_time desc limit ? 
2013-08-12 09:03:08  DEBUG [620877@qtp-5906027-8] (Slf4jImpl.java:28) - ==> Parameters: 34(Integer), 2(String), 6(Integer)
2013-08-12 09:03:09  DEBUG [24275649@qtp-5906027-2] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:09  DEBUG [24275649@qtp-5906027-2] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 09:03:09  DEBUG [24275649@qtp-5906027-2] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 09:03:09  DEBUG [24275649@qtp-5906027-2] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:09  DEBUG [24275649@qtp-5906027-2] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 09:03:09  DEBUG [24275649@qtp-5906027-2] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 09:03:10  DEBUG [29686429@qtp-5906027-5] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:10  DEBUG [29686429@qtp-5906027-5] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USER_CUSTOM WHERE user_name=? AND binded_user_name=? AND type=? 
2013-08-12 09:03:10  DEBUG [29686429@qtp-5906027-5] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 100009(String), 3(String)
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-02(String)
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-03(String)
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-04(String)
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-05(String)
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-06(String)
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-07(String)
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-08(String)
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-09(String)
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-10(String)
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 09:03:10  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-11(String)
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: select * from ec_core_userthread where site_code=? 
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: 100009(String)
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: select count(waybill_no) from zebra_surfacebill where current_user_no=? and is_use=? 
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: K10000902(String), 0(Integer)
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: select count(waybill_no) from zebra_surfacebill where current_user_no=? 
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: K10000902(String)
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: select count(waybill_no) from zebra_surfacebill where current_user_no=? and (is_use=1 or is_use=2) 
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: K10000902(String)
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: select * from zebra_forewarn where customer_code=? 
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: K10000902(String)
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 09:03:16  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 09:08:20  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:08:20  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 09:08:20  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 09:08:20  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:08:20  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 09:08:20  DEBUG [31572020@qtp-5906027-3] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 09:13:25  DEBUG [26444315@qtp-5906027-13] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:13:25  DEBUG [26444315@qtp-5906027-13] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 09:13:25  DEBUG [26444315@qtp-5906027-13] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 09:13:25  DEBUG [26444315@qtp-5906027-13] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:13:25  DEBUG [26444315@qtp-5906027-13] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 09:13:25  DEBUG [26444315@qtp-5906027-13] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 09:18:27  DEBUG [22365891@qtp-5906027-15] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:18:27  DEBUG [22365891@qtp-5906027-15] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 09:18:27  DEBUG [22365891@qtp-5906027-15] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 09:18:27  DEBUG [22365891@qtp-5906027-15] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:18:27  DEBUG [22365891@qtp-5906027-15] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 09:18:27  DEBUG [22365891@qtp-5906027-15] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 09:23:29  DEBUG [8046224@qtp-5906027-17] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:23:29  DEBUG [8046224@qtp-5906027-17] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 09:23:29  DEBUG [8046224@qtp-5906027-17] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 09:23:29  DEBUG [8046224@qtp-5906027-17] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:23:29  DEBUG [8046224@qtp-5906027-17] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 09:23:29  DEBUG [8046224@qtp-5906027-17] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 09:28:32  DEBUG [9676270@qtp-5906027-20] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:28:32  DEBUG [9676270@qtp-5906027-20] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 09:28:32  DEBUG [9676270@qtp-5906027-20] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 09:28:32  DEBUG [9676270@qtp-5906027-20] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:28:32  DEBUG [9676270@qtp-5906027-20] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 09:28:32  DEBUG [9676270@qtp-5906027-20] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 09:33:34  DEBUG [4413067@qtp-5906027-22] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:33:34  DEBUG [4413067@qtp-5906027-22] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 09:33:34  DEBUG [4413067@qtp-5906027-22] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 09:33:34  DEBUG [4413067@qtp-5906027-22] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:33:34  DEBUG [4413067@qtp-5906027-22] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 09:33:34  DEBUG [4413067@qtp-5906027-22] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 09:38:39  DEBUG [15983947@qtp-5906027-27] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:38:39  DEBUG [15983947@qtp-5906027-27] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 09:38:39  DEBUG [15983947@qtp-5906027-27] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 09:38:39  DEBUG [15983947@qtp-5906027-27] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:38:39  DEBUG [15983947@qtp-5906027-27] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 09:38:39  DEBUG [15983947@qtp-5906027-27] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 09:43:44  DEBUG [28701526@qtp-5906027-32] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:43:44  DEBUG [28701526@qtp-5906027-32] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 09:43:44  DEBUG [28701526@qtp-5906027-32] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 09:43:44  DEBUG [28701526@qtp-5906027-32] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:43:44  DEBUG [28701526@qtp-5906027-32] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 09:43:44  DEBUG [28701526@qtp-5906027-32] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 09:48:48  DEBUG [21821345@qtp-5906027-36] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:48:48  DEBUG [21821345@qtp-5906027-36] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 09:48:48  DEBUG [21821345@qtp-5906027-36] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 09:48:48  DEBUG [21821345@qtp-5906027-36] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:48:48  DEBUG [21821345@qtp-5906027-36] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 09:48:48  DEBUG [21821345@qtp-5906027-36] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 09:53:52  DEBUG [182774@qtp-5906027-40] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:53:52  DEBUG [182774@qtp-5906027-40] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 09:53:52  DEBUG [182774@qtp-5906027-40] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 09:53:52  DEBUG [182774@qtp-5906027-40] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:53:52  DEBUG [182774@qtp-5906027-40] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 09:53:52  DEBUG [182774@qtp-5906027-40] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 09:58:56  DEBUG [18063131@qtp-5906027-44] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:58:56  DEBUG [18063131@qtp-5906027-44] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 09:58:56  DEBUG [18063131@qtp-5906027-44] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 09:58:56  DEBUG [18063131@qtp-5906027-44] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 09:58:56  DEBUG [18063131@qtp-5906027-44] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 09:58:56  DEBUG [18063131@qtp-5906027-44] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 10:04:01  DEBUG [32246685@qtp-5906027-49] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:04:01  DEBUG [32246685@qtp-5906027-49] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 10:04:01  DEBUG [32246685@qtp-5906027-49] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 10:04:13  DEBUG [32246685@qtp-5906027-49] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:04:13  DEBUG [32246685@qtp-5906027-49] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 10:04:13  DEBUG [32246685@qtp-5906027-49] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 10:09:05  DEBUG [30502318@qtp-5906027-53] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:09:05  DEBUG [30502318@qtp-5906027-53] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 10:09:05  DEBUG [30502318@qtp-5906027-53] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 10:09:05  DEBUG [30502318@qtp-5906027-53] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:09:05  DEBUG [30502318@qtp-5906027-53] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 10:09:05  DEBUG [30502318@qtp-5906027-53] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 10:14:09  DEBUG [15170749@qtp-5906027-57] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:14:09  DEBUG [15170749@qtp-5906027-57] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 10:14:09  DEBUG [15170749@qtp-5906027-57] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 10:14:09  DEBUG [15170749@qtp-5906027-57] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:14:09  DEBUG [15170749@qtp-5906027-57] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 10:14:09  DEBUG [15170749@qtp-5906027-57] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 10:19:13  DEBUG [26749477@qtp-5906027-61] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:19:13  DEBUG [26749477@qtp-5906027-61] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 10:19:13  DEBUG [26749477@qtp-5906027-61] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 10:19:13  DEBUG [26749477@qtp-5906027-61] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:19:13  DEBUG [26749477@qtp-5906027-61] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 10:19:13  DEBUG [26749477@qtp-5906027-61] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 10:24:16  DEBUG [3433250@qtp-5906027-64] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:24:16  DEBUG [3433250@qtp-5906027-64] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 10:24:16  DEBUG [3433250@qtp-5906027-64] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 10:24:16  DEBUG [3433250@qtp-5906027-64] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:24:16  DEBUG [3433250@qtp-5906027-64] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 10:24:16  DEBUG [3433250@qtp-5906027-64] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 10:29:20  DEBUG [5649278@qtp-5906027-68] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:29:20  DEBUG [5649278@qtp-5906027-68] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 10:29:20  DEBUG [5649278@qtp-5906027-68] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 10:29:20  DEBUG [5649278@qtp-5906027-68] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:29:20  DEBUG [5649278@qtp-5906027-68] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 10:29:20  DEBUG [5649278@qtp-5906027-68] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 10:34:22  DEBUG [3678972@qtp-5906027-70] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:34:22  DEBUG [3678972@qtp-5906027-70] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 10:34:22  DEBUG [3678972@qtp-5906027-70] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 10:34:22  DEBUG [3678972@qtp-5906027-70] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:34:22  DEBUG [3678972@qtp-5906027-70] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 10:34:22  DEBUG [3678972@qtp-5906027-70] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 10:39:26  DEBUG [11438046@qtp-5906027-75] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:39:26  DEBUG [11438046@qtp-5906027-75] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 10:39:26  DEBUG [11438046@qtp-5906027-75] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 10:39:26  DEBUG [11438046@qtp-5906027-75] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:39:26  DEBUG [11438046@qtp-5906027-75] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 10:39:26  DEBUG [11438046@qtp-5906027-75] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 10:44:31  DEBUG [20764090@qtp-5906027-80] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:44:31  DEBUG [20764090@qtp-5906027-80] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 10:44:31  DEBUG [20764090@qtp-5906027-80] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 10:44:31  DEBUG [20764090@qtp-5906027-80] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:44:31  DEBUG [20764090@qtp-5906027-80] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 10:44:31  DEBUG [20764090@qtp-5906027-80] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 10:49:35  DEBUG [32613964@qtp-5906027-84] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:49:35  DEBUG [32613964@qtp-5906027-84] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 10:49:35  DEBUG [32613964@qtp-5906027-84] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 10:49:35  DEBUG [32613964@qtp-5906027-84] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:49:35  DEBUG [32613964@qtp-5906027-84] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 10:49:35  DEBUG [32613964@qtp-5906027-84] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 10:54:37  DEBUG [25150217@qtp-5906027-87] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:54:37  DEBUG [25150217@qtp-5906027-87] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 10:54:37  DEBUG [25150217@qtp-5906027-87] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 10:54:37  DEBUG [25150217@qtp-5906027-87] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:54:37  DEBUG [25150217@qtp-5906027-87] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 10:54:37  DEBUG [25150217@qtp-5906027-87] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 10:59:39  DEBUG [31292595@qtp-5906027-89] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:59:39  DEBUG [31292595@qtp-5906027-89] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 10:59:39  DEBUG [31292595@qtp-5906027-89] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 10:59:39  DEBUG [31292595@qtp-5906027-89] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 10:59:39  DEBUG [31292595@qtp-5906027-89] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 10:59:39  DEBUG [31292595@qtp-5906027-89] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 11:04:43  DEBUG [7613120@qtp-5906027-93] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:04:43  DEBUG [7613120@qtp-5906027-93] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 11:04:43  DEBUG [7613120@qtp-5906027-93] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 11:04:43  DEBUG [7613120@qtp-5906027-93] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:04:43  DEBUG [7613120@qtp-5906027-93] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 11:04:43  DEBUG [7613120@qtp-5906027-93] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 11:09:47  DEBUG [12332678@qtp-5906027-97] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:09:47  DEBUG [12332678@qtp-5906027-97] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 11:09:47  DEBUG [12332678@qtp-5906027-97] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 11:09:47  DEBUG [12332678@qtp-5906027-97] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:09:47  DEBUG [12332678@qtp-5906027-97] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 11:09:47  DEBUG [12332678@qtp-5906027-97] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 11:14:49  DEBUG [10775482@qtp-5906027-99] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:14:49  DEBUG [10775482@qtp-5906027-99] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 11:14:49  DEBUG [10775482@qtp-5906027-99] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 11:14:49  DEBUG [10775482@qtp-5906027-99] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:14:49  DEBUG [10775482@qtp-5906027-99] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 11:14:49  DEBUG [10775482@qtp-5906027-99] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 11:19:54  DEBUG [834117@qtp-5906027-104] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:19:54  DEBUG [834117@qtp-5906027-104] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 11:19:54  DEBUG [834117@qtp-5906027-104] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 11:19:54  DEBUG [834117@qtp-5906027-104] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:19:54  DEBUG [834117@qtp-5906027-104] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 11:19:54  DEBUG [834117@qtp-5906027-104] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 11:24:58  DEBUG [28736225@qtp-5906027-109] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:24:58  DEBUG [28736225@qtp-5906027-109] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 11:24:58  DEBUG [28736225@qtp-5906027-109] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 11:24:58  DEBUG [28736225@qtp-5906027-109] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:24:58  DEBUG [28736225@qtp-5906027-109] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 11:24:58  DEBUG [28736225@qtp-5906027-109] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 11:30:03  DEBUG [19037785@qtp-5906027-114] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:30:03  DEBUG [19037785@qtp-5906027-114] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 11:30:03  DEBUG [19037785@qtp-5906027-114] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 11:30:03  DEBUG [19037785@qtp-5906027-114] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:30:03  DEBUG [19037785@qtp-5906027-114] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 11:30:03  DEBUG [19037785@qtp-5906027-114] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 11:35:06  DEBUG [541121@qtp-5906027-117] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:35:06  DEBUG [541121@qtp-5906027-117] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 11:35:06  DEBUG [541121@qtp-5906027-117] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 11:35:06  DEBUG [541121@qtp-5906027-117] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:35:06  DEBUG [541121@qtp-5906027-117] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 11:35:06  DEBUG [541121@qtp-5906027-117] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 11:40:11  DEBUG [8109510@qtp-5906027-122] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:40:11  DEBUG [8109510@qtp-5906027-122] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 11:40:11  DEBUG [8109510@qtp-5906027-122] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 11:40:11  DEBUG [8109510@qtp-5906027-122] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:40:11  DEBUG [8109510@qtp-5906027-122] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 11:40:11  DEBUG [8109510@qtp-5906027-122] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 11:45:14  DEBUG [11301035@qtp-5906027-125] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:45:14  DEBUG [11301035@qtp-5906027-125] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 11:45:14  DEBUG [11301035@qtp-5906027-125] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 11:45:14  DEBUG [11301035@qtp-5906027-125] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:45:14  DEBUG [11301035@qtp-5906027-125] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 11:45:14  DEBUG [11301035@qtp-5906027-125] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 11:50:18  DEBUG [14917189@qtp-5906027-129] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:50:18  DEBUG [14917189@qtp-5906027-129] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 11:50:18  DEBUG [14917189@qtp-5906027-129] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 11:50:18  DEBUG [14917189@qtp-5906027-129] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:50:18  DEBUG [14917189@qtp-5906027-129] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 11:50:18  DEBUG [14917189@qtp-5906027-129] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 11:55:21  DEBUG [20332378@qtp-5906027-133] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:55:21  DEBUG [20332378@qtp-5906027-133] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 11:55:21  DEBUG [20332378@qtp-5906027-133] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 11:55:22  DEBUG [20332378@qtp-5906027-133] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 11:55:22  DEBUG [20332378@qtp-5906027-133] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 11:55:22  DEBUG [20332378@qtp-5906027-133] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 12:00:25  DEBUG [17563363@qtp-5906027-136] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:00:25  DEBUG [17563363@qtp-5906027-136] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 12:00:25  DEBUG [17563363@qtp-5906027-136] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 12:00:25  DEBUG [17563363@qtp-5906027-136] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:00:25  DEBUG [17563363@qtp-5906027-136] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 12:00:25  DEBUG [17563363@qtp-5906027-136] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 12:05:29  DEBUG [27741482@qtp-5906027-140] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:05:29  DEBUG [27741482@qtp-5906027-140] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 12:05:29  DEBUG [27741482@qtp-5906027-140] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 12:05:29  DEBUG [27741482@qtp-5906027-140] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:05:29  DEBUG [27741482@qtp-5906027-140] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 12:05:29  DEBUG [27741482@qtp-5906027-140] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 12:10:33  DEBUG [26255230@qtp-5906027-145] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:10:33  DEBUG [26255230@qtp-5906027-145] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 12:10:33  DEBUG [26255230@qtp-5906027-145] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 12:10:33  DEBUG [26255230@qtp-5906027-145] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:10:33  DEBUG [26255230@qtp-5906027-145] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 12:10:33  DEBUG [26255230@qtp-5906027-145] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 12:15:37  DEBUG [12084745@qtp-5906027-149] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:15:37  DEBUG [12084745@qtp-5906027-149] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 12:15:37  DEBUG [12084745@qtp-5906027-149] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 12:15:37  DEBUG [12084745@qtp-5906027-149] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:15:37  DEBUG [12084745@qtp-5906027-149] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 12:15:37  DEBUG [12084745@qtp-5906027-149] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 12:20:42  DEBUG [4029018@qtp-5906027-154] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:20:42  DEBUG [4029018@qtp-5906027-154] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 12:20:42  DEBUG [4029018@qtp-5906027-154] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 12:20:42  DEBUG [4029018@qtp-5906027-154] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:20:42  DEBUG [4029018@qtp-5906027-154] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 12:20:42  DEBUG [4029018@qtp-5906027-154] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 12:25:46  DEBUG [154939@qtp-5906027-158] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:25:46  DEBUG [154939@qtp-5906027-158] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 12:25:46  DEBUG [154939@qtp-5906027-158] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 12:25:46  DEBUG [154939@qtp-5906027-158] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:25:46  DEBUG [154939@qtp-5906027-158] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 12:25:46  DEBUG [154939@qtp-5906027-158] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 12:30:50  DEBUG [22194918@qtp-5906027-162] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:30:50  DEBUG [22194918@qtp-5906027-162] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 12:30:50  DEBUG [22194918@qtp-5906027-162] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 12:30:50  DEBUG [22194918@qtp-5906027-162] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:30:50  DEBUG [22194918@qtp-5906027-162] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 12:30:50  DEBUG [22194918@qtp-5906027-162] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 12:35:54  DEBUG [27321352@qtp-5906027-166] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:35:54  DEBUG [27321352@qtp-5906027-166] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 12:35:54  DEBUG [27321352@qtp-5906027-166] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 12:35:54  DEBUG [27321352@qtp-5906027-166] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:35:54  DEBUG [27321352@qtp-5906027-166] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 12:35:54  DEBUG [27321352@qtp-5906027-166] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 12:40:58  DEBUG [4195666@qtp-5906027-170] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:40:58  DEBUG [4195666@qtp-5906027-170] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 12:40:58  DEBUG [4195666@qtp-5906027-170] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 12:40:58  DEBUG [4195666@qtp-5906027-170] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:40:58  DEBUG [4195666@qtp-5906027-170] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 12:40:58  DEBUG [4195666@qtp-5906027-170] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 12:46:02  DEBUG [3964351@qtp-5906027-174] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:46:02  DEBUG [3964351@qtp-5906027-174] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 12:46:02  DEBUG [3964351@qtp-5906027-174] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 12:46:02  DEBUG [3964351@qtp-5906027-174] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 12:46:02  DEBUG [3964351@qtp-5906027-174] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 12:46:02  DEBUG [3964351@qtp-5906027-174] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USER WHERE user_name = BINARY(?) AND user_password = ? 
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 4QrcOUm6Wau+VuBX8g+IPg==(String)
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USER_CUSTOM WHERE user_name=? AND relational_query=? AND type=? 
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 1(String), 1(String)
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USER WHERE id = ? 
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer)
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: insert into EC_CORE_STATS_MESSAGE(id,stats_type, stats_reason, remark,login_time,logout_time,user_id) values(?, ?, ?, ?, ?, ?, ?) 
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 0(String), net.ytoec.kernel.dataobject.User@c(String), 100009:登录系统,ip:127.0.0.1,ip:127.0.0.1,ip:127.0.0.1(String), 2013-08-12 16:06:02.856(Timestamp), null, 12(Integer)
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: UPDATE EC_CORE_USER SET parentId=?, user_name=?, user_password=?, tele_phone=?, mobile_phone=?, address_province=?, address_city=?, address_district=?, address_street=?, sex=?, shop_name=?, shop_account=?, mail=?, card_type=?, card_no=?, user_type=?, user_source=?, user_state=?, user_level=?, create_user=?, update_time=now(), remark=?, site=?, user_name_text=?, user_code = ?, login_time = ?, taobao_encode_key = ?, field001 = ?, field002 = ?, field003 = ?, binded_customer_id = ?, client_id = ? ,child_type = ? WHERE id = ? 
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: null, 100009(String), 4QrcOUm6Wau+VuBX8g+IPg==(String), 010-64262238(String), 18001387001(String), 北京(String), 北京市(String), 朝阳区(String), 黄寺大街12号华沛写字楼A座一层(String),  M(String), null, null, caozhi_soft@163.com(String),  1(String), 771037(String), 2(String), null, 1(String), null, null, null, 100009(String), 和记黄埔（中国）商贸有限公司(String), 100009(String), 2013-08-12 16:06:02.856(Timestamp), 12(String), 110000(String), ,MDAwMDk=,TXZBYw==,eXRvMQ==(String), true(String), null, null, null, 12(Integer)
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USER U WHERE U.PARENTID = ? order by u.login_time desc 
2013-08-12 16:06:02  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer)
2013-08-12 16:06:03  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:03  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USERTHREAD WHERE user_state= ? and site_code = ? order by cteate_time desc 
2013-08-12 16:06:03  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 1(String), 100009(String)
2013-08-12 16:06:03  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:03  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select * from eop_cms_column where column_code = ? 
2013-08-12 16:06:03  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: yitong_01(String)
2013-08-12 16:06:03  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select * from eop_cms_article WHERE column_id = ? and reader_type in(?,'0') ORDER BY seq asc,create_time desc limit ? 
2013-08-12 16:06:03  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 34(Integer), 2(String), 6(Integer)
2013-08-12 16:06:03  DEBUG [15326915@qtp-5906027-179] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:03  DEBUG [15326915@qtp-5906027-179] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 16:06:03  DEBUG [15326915@qtp-5906027-179] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 16:06:03  DEBUG [15326915@qtp-5906027-179] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:03  DEBUG [15326915@qtp-5906027-179] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 16:06:03  DEBUG [15326915@qtp-5906027-179] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 16:06:03  DEBUG [15326915@qtp-5906027-179] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:03  DEBUG [15326915@qtp-5906027-179] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM EC_CORE_USER_CUSTOM WHERE user_name=? AND binded_user_name=? AND type=? 
2013-08-12 16:06:03  DEBUG [15326915@qtp-5906027-179] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 100009(String), 3(String)
2013-08-12 16:06:03  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-02(String)
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-03(String)
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-04(String)
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-05(String)
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-06(String)
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-07(String)
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-08(String)
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-09(String)
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-10(String)
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: SELECT * FROM ec_core_mailno_tendency t WHERE t.site_id = ? AND t.mailno_create_time = ? ORDER BY t.partitiondate DESC 
2013-08-12 16:06:04  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 12(Integer), 2013-08-11(String)
2013-08-12 16:06:05  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:05  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select * from ec_core_userthread where site_code=? 
2013-08-12 16:06:05  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 100009(String)
2013-08-12 16:06:05  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:05  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select count(waybill_no) from zebra_surfacebill where current_user_no=? and is_use=? 
2013-08-12 16:06:05  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: K10000902(String), 0(Integer)
2013-08-12 16:06:05  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:05  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select count(waybill_no) from zebra_surfacebill where current_user_no=? 
2013-08-12 16:06:05  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: K10000902(String)
2013-08-12 16:06:05  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:05  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select count(waybill_no) from zebra_surfacebill where current_user_no=? and (is_use=1 or is_use=2) 
2013-08-12 16:06:05  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: K10000902(String)
2013-08-12 16:06:05  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:05  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select * from zebra_forewarn where customer_code=? 
2013-08-12 16:06:05  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: K10000902(String)
2013-08-12 16:06:10  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:10  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 16:06:10  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 16:06:10  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:10  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 16:06:10  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 16:06:49  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:49  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select * from ec_core_userthread where site_code=? 
2013-08-12 16:06:49  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 100009(String)
2013-08-12 16:06:49  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:49  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select count(waybill_no) from zebra_surfacebill where current_user_no=? and is_use=? 
2013-08-12 16:06:49  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: K10000902(String), 0(Integer)
2013-08-12 16:06:49  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:49  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select count(waybill_no) from zebra_surfacebill where current_user_no=? 
2013-08-12 16:06:49  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: K10000902(String)
2013-08-12 16:06:49  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:49  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select count(waybill_no) from zebra_surfacebill where current_user_no=? and (is_use=1 or is_use=2) 
2013-08-12 16:06:49  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: K10000902(String)
2013-08-12 16:06:49  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:49  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select * from zebra_forewarn where customer_code=? 
2013-08-12 16:06:49  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: K10000902(String)
2013-08-12 16:06:50  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:50  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 16:06:50  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 16:06:50  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:06:50  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 16:06:50  DEBUG [21647477@qtp-5906027-176] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 16:11:50  DEBUG [15326915@qtp-5906027-179] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:11:50  DEBUG [15326915@qtp-5906027-179] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 16:11:50  DEBUG [15326915@qtp-5906027-179] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 16:11:50  DEBUG [15326915@qtp-5906027-179] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:11:50  DEBUG [15326915@qtp-5906027-179] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 16:11:50  DEBUG [15326915@qtp-5906027-179] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 16:16:53  DEBUG [22829726@qtp-5906027-183] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:16:53  DEBUG [22829726@qtp-5906027-183] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 16:16:53  DEBUG [22829726@qtp-5906027-183] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 16:16:53  DEBUG [22829726@qtp-5906027-183] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:16:53  DEBUG [22829726@qtp-5906027-183] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 16:16:53  DEBUG [22829726@qtp-5906027-183] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 16:21:57  DEBUG [18774020@qtp-5906027-187] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:21:57  DEBUG [18774020@qtp-5906027-187] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 16:21:57  DEBUG [18774020@qtp-5906027-187] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 16:21:57  DEBUG [18774020@qtp-5906027-187] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:21:57  DEBUG [18774020@qtp-5906027-187] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 16:21:57  DEBUG [18774020@qtp-5906027-187] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 16:26:58  DEBUG [1435034@qtp-5906027-189] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:26:58  DEBUG [1435034@qtp-5906027-189] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 16:26:58  DEBUG [1435034@qtp-5906027-189] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 16:26:58  DEBUG [1435034@qtp-5906027-189] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:26:58  DEBUG [1435034@qtp-5906027-189] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 16:26:58  DEBUG [1435034@qtp-5906027-189] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 16:32:00  DEBUG [14097619@qtp-5906027-191] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:32:00  DEBUG [14097619@qtp-5906027-191] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 16:32:00  DEBUG [14097619@qtp-5906027-191] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 16:32:00  DEBUG [14097619@qtp-5906027-191] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:32:00  DEBUG [14097619@qtp-5906027-191] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 16:32:00  DEBUG [14097619@qtp-5906027-191] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 16:37:02  DEBUG [23259041@qtp-5906027-193] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:37:02  DEBUG [23259041@qtp-5906027-193] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 16:37:02  DEBUG [23259041@qtp-5906027-193] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 16:37:02  DEBUG [23259041@qtp-5906027-193] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:37:02  DEBUG [23259041@qtp-5906027-193] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 16:37:02  DEBUG [23259041@qtp-5906027-193] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
2013-08-12 16:42:05  DEBUG [19022409@qtp-5906027-196] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:42:05  DEBUG [19022409@qtp-5906027-196] (Slf4jImpl.java:28) - ==>  Executing: select * from EC_CORE_MESSAGE_USER t where t.message_status = ? and t.user_id = ? 
2013-08-12 16:42:05  DEBUG [19022409@qtp-5906027-196] (Slf4jImpl.java:28) - ==> Parameters: 0(Integer), 12(Integer)
2013-08-12 16:42:05  DEBUG [19022409@qtp-5906027-196] (Slf4jImpl.java:28) - ooo Connection Opened
2013-08-12 16:42:05  DEBUG [19022409@qtp-5906027-196] (Slf4jImpl.java:28) - ==>  Executing: select count(*) from EC_CORE_QUESTIONNAIRE t WHERE t.branck_id = ? AND t.wdIsRead = ? AND t.deal_status = ? AND t.partitiondate between ? and ? AND t.order_status = ? 
2013-08-12 16:42:05  DEBUG [19022409@qtp-5906027-196] (Slf4jImpl.java:28) - ==> Parameters: 100009(String), 0(String), 2(String), 2013-08-03 00:00:00.0(Timestamp), 2013-08-13 00:00:00.0(Timestamp), 0(String)
